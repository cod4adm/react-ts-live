{"version":3,"sources":["serviceWorker.ts","components/Navbar.tsx","components/TodoForm.tsx","components/TodoList.tsx","pages/TodosPage.tsx","pages/AboutPage.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Navbar","className","to","id","TodoForm","props","useState","title","setTitle","onChange","event","target","value","type","placeholder","onKeyPress","key","onAdd","htmlFor","TodoList","todos","onRemove","onToggle","length","map","todo","classes","completed","push","join","checked","bind","onClick","preventDefault","removeHandler","TodosPage","setTodos","useEffect","saved","JSON","parse","localStorage","getItem","setItem","stringify","newTodo","Date","now","prev","confirm","filter","AboutPage","history","useHistory","App","component","path","exact","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fe317672.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const Navbar: React.FC = () => (\r\n    <nav>\r\n        <div className=\"nav-wrapper blue darken-1 px1\">\r\n            <NavLink to=\"/react-ts-live/\" className=\"brand-logo\">React + Typescript</NavLink>\r\n            <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n                <li><NavLink to=\"/react-ts-live/\">Список дел</NavLink></li>\r\n                <li><NavLink to=\"/react-ts-live/about\">Информация</NavLink></li>\r\n            </ul>\r\n        </div>\r\n    </nav>\r\n);\r\n","import React, {useState} from \"react\";\r\n\r\ninterface TodoFormProps {\r\n    onAdd(title: string): void\r\n}\r\n\r\nexport const TodoForm: React.FC<TodoFormProps> = props => {\r\n    const [title, setTitle] = useState<string>('');\r\n\r\n    const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.target.value)\r\n    };\r\n\r\n    const keyPressHandler = (event: React.KeyboardEvent) => {\r\n        if (event.key === 'Enter') {\r\n            props.onAdd(title);\r\n            setTitle('')\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='input-field mt2'>\r\n            <input\r\n                onChange={changeHandler}\r\n                value={title}\r\n                type=\"text\"\r\n                id='title'\r\n                placeholder='Введите название дела'\r\n                onKeyPress={keyPressHandler}\r\n            />\r\n            <label htmlFor=\"title\" className='active'>Введите название дела</label>\r\n        </div>\r\n    )\r\n};\r\n","import React from \"react\";\r\nimport {ITodo} from \"../interfaces\";\r\n\r\ntype TodoListProps = {\r\n    todos: ITodo[]\r\n    onToggle(id: number): void\r\n    onRemove: (id: number) => void\r\n}\r\n\r\nexport const TodoList: React.FC<TodoListProps> = ({todos, onRemove, onToggle}) => {\r\n    if (todos.length === 0) {\r\n        return <p className='center'>Пока дел нет!</p>\r\n    }\r\n\r\n    const removeHandler = (event: React.MouseEvent, id: number) => {\r\n        event.preventDefault();\r\n        onRemove(id)\r\n    };\r\n\r\n    return (\r\n        <ul>\r\n            {todos.map(todo => {\r\n                const classes = ['todo'];\r\n                if (todo.completed) {\r\n                    classes.push('completed')\r\n                }\r\n\r\n                return (\r\n                    <li className={classes.join(' ')} key={todo.id}>\r\n                        <label>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                checked={todo.completed}\r\n                                onChange={onToggle.bind(null, todo.id)}\r\n                            />\r\n                            <span>{todo.title}</span>\r\n                            <i\r\n                                className=\"material-icons red-text\"\r\n                                onClick={event => removeHandler(event, todo.id)}\r\n                            >\r\n                                delete\r\n                            </i>\r\n                        </label>\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n    )\r\n};\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {TodoForm} from \"../components/TodoForm\";\r\nimport {TodoList} from \"../components/TodoList\";\r\nimport {ITodo} from \"../interfaces\";\r\n\r\ndeclare var confirm: (question: string) => boolean;\r\n\r\nexport const TodosPage: React.FC = () => {\r\n    const [todos, setTodos] = useState<ITodo[]>([]);\r\n    useEffect(() => {\r\n        const saved = JSON.parse(localStorage.getItem('todos') || '[]') as ITodo[];\r\n        setTodos(saved)\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('todos', JSON.stringify(todos))\r\n    }, [todos]);\r\n\r\n    const addHandler = (title: string) => {\r\n        const newTodo: ITodo = {\r\n            title: title,\r\n            id: Date.now(),\r\n            completed: false\r\n        };\r\n        setTodos(prev => [newTodo, ...prev])\r\n    };\r\n\r\n    const toggleHandler = (id: number) => {\r\n        setTodos(prev =>\r\n            prev.map(todo => {\r\n                if (todo.id === id) {\r\n                    return {\r\n                        ...todo,\r\n                        completed: !todo.completed\r\n                    }\r\n                }\r\n                return todo\r\n            })\r\n        )\r\n    };\r\n\r\n    const removeHandler = (id: number) => {\r\n        const shouldRemove = confirm('Вы уверены, что хотите удалить элемент?');\r\n        if (shouldRemove) {\r\n            setTodos(prev => prev.filter(todo => todo.id !== id))\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <TodoForm onAdd={addHandler}/>\r\n            <TodoList todos={todos} onRemove={removeHandler} onToggle={toggleHandler}/>\r\n        </>\r\n    )\r\n};\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const AboutPage: React.FC = () => {\r\n    const history = useHistory();\r\n    return (\r\n        <>\r\n            <h1>Страница информации</h1>\r\n            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Accusamus beatae deleniti dolores eum illo, in\r\n                iste odio possimus recusandae unde.</p>\r\n            <button className='btn' onClick={() => history.push('/')} >Обратно к списку дел</button>\r\n        </>\r\n    )\r\n};\r\n","import React from 'react';\nimport {Navbar} from \"./components/Navbar\";\nimport {BrowserRouter, Switch, Route} from \"react-router-dom\";\nimport {TodosPage} from \"./pages/TodosPage\";\nimport {AboutPage} from \"./pages/AboutPage\";\n\nexport const App: React.FC = () => {\n    return (\n        <BrowserRouter>\n            <Navbar/>\n            <div className=\"container\">\n                <Switch>\n                    <Route component={TodosPage} path='/react-ts-live/' exact />\n                    <Route component={AboutPage} path='/react-ts-live/about' />\n                </Switch>\n            </div>\n        </BrowserRouter>\n    );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}